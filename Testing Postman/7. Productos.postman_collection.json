{
	"info": {
		"_postman_id": "57d42240-8554-4dff-a2c2-d1061561cc27",
		"name": "7. Productos",
		"description": "API REST\n\n.../categorias:\n\nmethod's post, get and put",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18027182"
	},
	"item": [
		{
			"name": "Post (producto on body) 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"El id no puede ser null\", ()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"      pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombreProducto\": \"Producto1\",\r\n    \"tituloDescripcion\": \"tituloDescripcion1\",\r\n    \"descripcion\": \"descripcion1\",\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"ciudad\": {\r\n        \"id\": 1\r\n    },\r\n    \"caracteristicas\":[{\r\n        \"id\":1\r\n    }],\r\n    \"politicas\":[{\r\n        \"id\":1\r\n    }]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/agregar",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"agregar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post (producto on body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"El id no puede ser null\", ()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"      pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombreProducto\": \"Producto1\",\r\n    \"tituloDescripcion\": \"tituloDescripcion1\",\r\n    \"descripcion\": \"descripcion1\",\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"ciudad\": {\r\n        \"id\": 1\r\n    },\r\n    \"caracteristicas\":[{\r\n        \"id\":1\r\n    }],\r\n    \"politicas\":[{\r\n        \"id\":1\r\n    }]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/agregar",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"agregar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All con parámetros",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							"pm.test(\"Los datos consultados del primer objeto son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categoria).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudad).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El array trae la cantidad de productos solicitados por parámetro o menos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.length).to.lessThan(9);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/listarTodos?size=8&page=0&ord=ASC&field=id",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"listarTodos"
					],
					"query": [
						{
							"key": "size",
							"value": "8"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "ord",
							"value": "ASC"
						},
						{
							"key": "field",
							"value": "id"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							"pm.test(\"Los datos consultados del primer objeto son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categoria).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudad).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/listarTodos?size=8&page=0&ord=ASC&field=id",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"listarTodos"
					],
					"query": [
						{
							"key": "size",
							"value": "8"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "ord",
							"value": "ASC"
						},
						{
							"key": "field",
							"value": "id"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Público",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							"pm.test(\"Los datos consultados del primer objeto son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categoria).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudad).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/listarTodos?size=8&page=0&ord=ASC&field=id",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"listarTodos"
					],
					"query": [
						{
							"key": "size",
							"value": "8"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "ord",
							"value": "ASC"
						},
						{
							"key": "field",
							"value": "id"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Random",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							"pm.test(\"Los datos consultados del primer objeto son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.nombreProducto).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.tituloDescripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categoria).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudad).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/listarTodosRandom",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"listarTodosRandom"
					],
					"query": [
						{
							"key": "size",
							"value": "5",
							"disabled": true
						},
						{
							"key": "page",
							"value": "0",
							"disabled": true
						},
						{
							"key": "ord",
							"value": "desc",
							"disabled": true
						},
						{
							"key": "field",
							"value": "id",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de la respuesta recibida\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"El objeto corresponde al id consultado\",()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.id).to.eql(2);\r",
							"});\r",
							"pm.test(\"Los datos consultados son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.nombreProducto).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.tituloDescripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categoria).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudad).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/2",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put  producto (producto con id en body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"El id no puede ser null\", ()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"      pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":1,\r\n    \"nombreProducto\": \"nuevo\",\r\n    \"tituloDescripcion\": \"nuevo\",\r\n    \"descripcion\": \"nuevo\",\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"ciudad\": {\r\n        \"id\": 1\r\n    },\r\n    \"caracteristicas\":[{\r\n        \"id\":1\r\n    }],\r\n    \"politicas\":[{\r\n        \"id\":1\r\n    }]\r\n}"
				},
				"url": {
					"raw": "{{urlbase}}/actualizar",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"actualizar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get después del Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							"pm.test(\"Los datos consultados del primer objeto son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categoria).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudad).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/listarTodosRandom",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"listarTodosRandom"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete ( id en url)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el estado de la respuesta\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{urlbase}}/eliminar/16",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"eliminar",
						"16"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete ( id en url) id inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el estado de la respuesta\r",
							"pm.test(\"Internal Server Error: no se puede eliminar id inexistente\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{urlbase}}/eliminar/200",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"eliminar",
						"200"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get después del Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							"pm.test(\"Los datos consultados del primer objeto son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categoria).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudad).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/listarTodosRandom",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"listarTodosRandom"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buscar por ciudad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							"pm.test(\"Los datos consultados del primer objeto son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.nombreProducto).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.tituloDescripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categoria).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudad).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El array trae la cantidad de productos solicitados por parámetro\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.length).to.lessThan(3);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/ciudad/2?size=2&page=0",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"ciudad",
						"2"
					],
					"query": [
						{
							"key": "size",
							"value": "2"
						},
						{
							"key": "page",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Buscar por categorias",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							"pm.test(\"Los datos consultados del primer objeto son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.nombreProducto).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.tituloDescripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categoria).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudad).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El array trae la cantidad de productos solicitados por parámetro\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.length).to.lessThan(3);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/categoria/1?size=2&page=0",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"categoria",
						"1"
					],
					"query": [
						{
							"key": "size",
							"value": "2"
						},
						{
							"key": "page",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Buscar por fechas (requiere body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fechaInicial\": \"2022-10-10\",\r\n    \"fechaFinal\": \"2022-10-20\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/fechaDisponible",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"fechaDisponible"
					],
					"query": [
						{
							"key": "size",
							"value": "10",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "servidor",
			"value": "localhost:8080/",
			"type": "string"
		},
		{
			"key": "urlbase",
			"value": "localhost:8080/productos",
			"type": "string"
		},
		{
			"key": "jwt",
			"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJnamxvYm9zMTQxQGdtYWlsLmNvbSIsImV4cCI6MTY1NTg1ODI5NCwiaWF0IjoxNjU1ODU3MDk0fQ.IaAsxmwXL3xWq6lY1xVk1S1zM4Pn6mUdOZYh0R-lISw",
			"type": "string"
		}
	]
}