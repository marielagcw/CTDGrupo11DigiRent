{
	"info": {
		"_postman_id": "c394125e-de94-4a8a-a50c-8b002459e357",
		"name": "0.3  Seguridad CRUD Usuarios SUPER",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18027182"
	},
	"item": [
		{
			"name": "Get All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// USUARIO ADMINISTRADOR\r",
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0].id).to.be.a(\"number\");\r",
							"    pm.expect(responseJson.length).to.be.greaterThan(0);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/listarTodos",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"listarTodos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get By Id (id en la url)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de la respuesta recibida\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"El objeto corresponde al id consultado\",()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.id).to.eql(5);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/8",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"8"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put  (id en el body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test que verifica estado de la respuesta recibida\r",
							"pm.test(\"El usuario fue modificado con éxito\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 9,\r\n    \"nombre\": \"Natali\",\r\n    \"apellido\": \"Correa\",\r\n    \"email\": \"gmail.com\",\r\n    \"password\": \"111111\",\r\n    \"ciudad\": \"Goya\",\r\n    \"rol\": {\r\n        \"id\": 2\r\n    },\r\n    \"reservas\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/actualizar",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"actualizar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put  (id en el body) Id inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test que verifica estado de la respuesta recibida\r",
							"pm.test(\"No se puede modificar un usuario inexistente\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"Gustavo\",\r\n    \"apellido\": \"Lobos\",\r\n    \"email\": \"gmail.com\",\r\n    \"password\": \"111111\",\r\n    \"ciudad\": \"Campana\",\r\n    \"rol\": {\r\n        \"id\": 1\r\n    },\r\n    \"reservas\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/actualizar",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"actualizar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get By Id (id en la url) después del Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de la respuesta recibida\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"El objeto corresponde al id consultado\",()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.id).to.eql(5);\r",
							"})\r",
							"pm.test(\"El email se modificó correctamente\", ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.email).to.eql(\"gmail.com\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/8",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"8"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put  (id en la url)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el estado de la respuesta\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/eliminar/4",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"eliminar",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get By Id (id en la url) después del Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de la respuesta recibida\r",
							"pm.test(\"El usuario no existe\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/7",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"7"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "urlbase",
			"value": "localhost:8080/usuarios"
		},
		{
			"key": "jwt",
			"value": "",
			"type": "string"
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}