{
	"info": {
		"_postman_id": "5fcd3d09-2573-4d62-a96c-09c946b9e165",
		"name": "1. Categorias",
		"description": "API REST\n\n.../categorias:\n\nmethod's post, get and put",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18027182"
	},
	"item": [
		{
			"name": "Post (requiere body) Cabañas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"Agregar categoría\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.titulo).to.be.a(\"string\");\r",
							"  pm.expect(responseJson.descripcion).to.be.a(\"string\");;\r",
							"  pm.expect(responseJson.url).to.be.a(\"string\");;\r",
							"});\r",
							"pm.test(\"El id no puede ser null\", ()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"      pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"titulo\": \"cabañas\",\r\n    \"descripcion\": \"Casas de madera para 2 personas\",\r\n    \"url\": \"https://images.unsplash.com/photo-1601918774946-25832a4be0d6?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=60&raw_url=true&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8Y2FiYSVDMyVCMWFzfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/agregar",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"agregar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post (requiere body) Casa temporaria",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"Agregar categoría\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.titulo).to.be.a(\"string\");\r",
							"  pm.expect(responseJson.descripcion).to.be.a(\"string\");;\r",
							"  pm.expect(responseJson.url).to.be.a(\"string\");;\r",
							"});\r",
							"pm.test(\"El id no puede ser null\", ()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"      pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"titulo\": \"casa temporaria\",\r\n    \"descripcion\": \"Casas de alquiler temporario cerca de ciudades\",\r\n    \"url\": \"https://images.unsplash.com/photo-1572120360610-d971b9d7767c?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/agregar",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"agregar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post (requiere body) casa de playa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"Agregar categoría\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.titulo).to.be.a(\"string\");\r",
							"  pm.expect(responseJson.descripcion).to.be.a(\"string\");;\r",
							"  pm.expect(responseJson.url).to.be.a(\"string\");;\r",
							"});\r",
							"pm.test(\"El id no puede ser null\", ()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"      pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"titulo\": \"casa de playa\",\r\n    \"descripcion\": \"Casas playeras con salida al mar\",\r\n    \"url\": \"https://images.unsplash.com/photo-1499793983690-e29da59ef1c2?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=60&raw_url=true&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Y2FzYSUyMGRlJTIwcGxheWF8ZW58MHx8MHx8&auto=format&fit=crop&w=500\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/agregar",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"agregar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post (requiere body) hostal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"Agregar categoría\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.titulo).to.be.a(\"string\");\r",
							"  pm.expect(responseJson.descripcion).to.be.a(\"string\");;\r",
							"  pm.expect(responseJson.url).to.be.a(\"string\");;\r",
							"});\r",
							"pm.test(\"El id no puede ser null\", ()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"      pm.expect(responseJson.id).to.be.a(\"number\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"titulo\": \"hostal\",\r\n    \"descripcion\": \"Casas de alquiler compartido\",\r\n    \"url\": \"https://images.unsplash.com/photo-1566073771259-6a8506099945?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=60&raw_url=true&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8aG9zdGVsfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlbase}}/agregar",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"agregar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0].id).to.be.a(\"number\");\r",
							"    pm.expect(responseJson.length).to.be.greaterThan(0);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/listarTodos",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"listarTodos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de la respuesta recibida\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"El objeto corresponde al id consultado\",()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.id).to.eql(1);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/1",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put actualizar (requiere id en body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el body de la respuesta recibida\r",
							"pm.test(\"Los campos fueron modificados exitosamente \", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.titulo).to.eql(\"nuevo\");\r",
							"  pm.expect(responseJson.url).to.eql(\"nuevo\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"id\":1,\r\n        \"titulo\": \"nuevo\",\r\n        \"descripcion\": \"nuevo\",\r\n        \"url\": \"nuevo\"\r\n    }"
				},
				"url": {
					"raw": "{{urlbase}}/actualizar",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"actualizar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put actualizar (requiere id en body) id inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el estado de la respuesta\r",
							"pm.test(\"Internal Server Error: no se puede modificar id inexistente\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"id\":100,\r\n        \"titulo\": \"nuevo\",\r\n        \"descripcion\": \"nuevo\",\r\n        \"url\": \"nuevo\"\r\n    }"
				},
				"url": {
					"raw": "{{urlbase}}/actualizar",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"actualizar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by id después del update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de la respuesta recibida\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"El objeto corresponde al id consultado\",()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.id).to.eql(1);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/1",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete ( id en url)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el estado de la respuesta\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{urlbase}}/eliminar/7",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"eliminar",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete ( id en url) id inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el estado de la respuesta\r",
							"pm.test(\"Internal Server Error: no se puede eliminar id inexistente\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"id_categorias\": 7,\r\n        \"titulo\": \"Hotel lujoso\",\r\n        \"descripcion\": \"edificio con habitaciones disponibles para más de 50 personas\",\r\n        \"url_imagen\": null\r\n    }"
				},
				"url": {
					"raw": "{{urlbase}}/eliminar/200",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"eliminar",
						"200"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by id después del delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de la respuesta recibida\r",
							"pm.test(\"El ID eliminado ya no puede consultarse\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlbase}}/7",
					"host": [
						"{{urlbase}}"
					],
					"path": [
						"7"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "servidor",
			"value": "localhost:8080/",
			"type": "string"
		},
		{
			"key": "urlbase",
			"value": "localhost:8080/categorias",
			"type": "string"
		},
		{
			"key": "jwt",
			"value": "",
			"type": "string"
		}
	]
}