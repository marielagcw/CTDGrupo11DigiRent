{
	"info": {
		"_postman_id": "57d42240-8554-4dff-a2c2-d1061561cc27",
		"name": "Productos",
		"description": "API REST\n\n.../categorias:\n\nmethod's post, get and put",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "18027182"
	},
	"item": [
		{
			"name": "Post productos (categoria on body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"El id no puede ser null\", ()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"      pm.expect(responseJson.id_categoria).to.be.a(\"number\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre_producto\": \"Producto\",\r\n    \"titulo_descripcion\": \"titulo breve producto\",\r\n    \"imagenes\": [\r\n    {\r\n        \"id_imagen\":1\r\n    }\r\n    ],\r\n    \"categorias\": {\r\n        \"id_categoria\": 1,\r\n        \"titulo\": \"categoria\",\r\n        \"descripcion\": \"descripcion categoria\",\r\n        \"ulr\": \"url imagen categoria\"\r\n    },\r\n    \"ciudades\": {\r\n        \"id_ciudad\": 1,\r\n        \"nombre\": \"ciudad\",\r\n        \"provincia\": \"provincia\",\r\n        \"pais\": \"pais\"\r\n    },\r\n    \"caracteristicas\": [\r\n        {\r\n            \"id_caracteristica\": 1\r\n        }\r\n    ],\r\n    \"politicas\": [\r\n        {\r\n            \"id_politica\": 1\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{urlbase}}/agregar"
			},
			"response": []
		},
		{
			"name": "Get Productos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.id_producto).to.be.a(\"number\");\r",
							"})\r",
							"pm.test(\"Los datos consultados del primer objeto son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.nombre_producto).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.titulo_descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categorias).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudades).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{urlbase}}/listarTodos"
			},
			"response": []
		},
		{
			"name": "Get producto by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de la respuesta recibida\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"El objeto corresponde al id consultado\",()=>{\r",
							"      const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.id_producto).to.eql(1);\r",
							"});\r",
							"pm.test(\"Los datos consultados son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.nombre_producto).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.titulo_descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categorias).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudades).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{urlbase}}/1"
			},
			"response": []
		},
		{
			"name": "Put actualizar producto (producto con id en body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{urlbase}}/actualizar"
			},
			"response": []
		},
		{
			"name": "Put actualizar producto (producto con id en body) id inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{urlbase}}/actualizar"
			},
			"response": []
		},
		{
			"name": "Get productos después del Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el estado de las respuestas\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Tests para verificar el body de la respuesta recibida\r",
							"pm.test(\"La respuesta trae un array de objetos\", ()=>{\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an(\"array\");\r",
							"})\r",
							"pm.test(\"El primer objeto del array está completo\",()=>{\r",
							"      const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.id_producto).to.be.a(\"number\");\r",
							"})\r",
							"pm.test(\"Los datos consultados del primer objeto son del tipo esperado\", ()=>{\r",
							"          const responseJson = pm.response.json()[0];\r",
							"    pm.expect(responseJson.nombre_producto).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.titulo_descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.descripcion).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.imagenes).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.categorias).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.ciudades).to.be.an(\"object\");\r",
							"    pm.expect(responseJson.caracteristicas).to.be.an(\"array\");\r",
							"    pm.expect(responseJson.politicas).to.be.an(\"array\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{urlbase}}/listarTodos"
			},
			"response": []
		},
		{
			"name": "Delete producto ( id en url)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el estado de la respuesta\r",
							"pm.test(\"Respuesta exitosa\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"// Test para verificar que haya un encabezado de respuesta\r",
							"pm.test(\"Content-Type está presente en el header\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"id_categorias\": 7,\r\n        \"titulo\": \"Hotel lujoso\",\r\n        \"descripcion\": \"edificio con habitaciones disponibles para más de 50 personas\",\r\n        \"url_imagen\": null\r\n    }"
				},
				"url": "{{urlbase}}/eliminar/2"
			},
			"response": []
		},
		{
			"name": "Delete producto ( id en url) id inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests para verificar el estado de la respuesta\r",
							"pm.test(\"Internal Server Error: no se puede eliminar id inexistente\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([500]);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"id_categorias\": 7,\r\n        \"titulo\": \"Hotel lujoso\",\r\n        \"descripcion\": \"edificio con habitaciones disponibles para más de 50 personas\",\r\n        \"url_imagen\": null\r\n    }"
				},
				"url": "{{urlbase}}/eliminar/200"
			},
			"response": []
		},
		{
			"name": "Get productos después del Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el tipo de contenido que hay en el header de la respuesta recibida\r",
							"pm.test(\"Content-Type en el header es application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{urlbase}}/listarTodos"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "servidor",
			"value": "localhost:8080/",
			"type": "string"
		},
		{
			"key": "urlbase",
			"value": "localhost:8080/productos",
			"type": "string"
		}
	]
}